name: Push Docker image to ECR
on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker-compose build
          docker-compose tag src1:latest meter-ocr/scr2:latest
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: meter-ocr
#           IMAGE_TAG: meter-ocr
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Copy Docker Compose File to EC2
        uses: appleboy/scp-action@master
        with:
          REMOTE_HOST: ${{ secrets.EC2_HOST }} # EC2 instance public IP or DNS name
          REMOTE_USER: ${{ secrets.EC2_USERNAME }} # EC2 instance username
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }} # Private key to authenticate to EC2
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Deploy to EC2
        uses: easingthemes/ssh-deploy@v2.1.5
        with:
         SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
         REMOTE_HOST: ${{secrets.REMOTE_HOST}}
         REMOTE_USER: ${{secrets.REMOTE_USER}}
         
